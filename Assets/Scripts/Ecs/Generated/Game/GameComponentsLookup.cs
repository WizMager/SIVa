//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int Destroyed = 0;
	public const int Link = 1;
	public const int Uid = 2;
	public const int Camera = 3;
	public const int Move = 4;
	public const int Player = 5;
	public const int Position = 6;
	public const int Rotation = 7;
	public const int Transform = 8;
	public const int GameDestroyedAddedListener = 9;
	public const int LinkRemovedListener = 10;
	public const int PositionAddedListener = 11;
	public const int RotationAddedListener = 12;

	public const int TotalComponents = 13;

	public static readonly string[] ComponentNames =
	{
		"Destroyed",
		"Link",
		"Uid",
		"Camera",
		"Move",
		"Player",
		"Position",
		"Rotation",
		"Transform",
		"GameDestroyedAddedListener",
		"LinkRemovedListener",
		"PositionAddedListener",
		"RotationAddedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Ecs.Common.Components.DestroyedComponent),
		typeof(Ecs.Common.Components.LinkComponent),
		typeof(Ecs.Common.Components.UidComponent),
		typeof(Ecs.Game.Components.CameraComponent),
		typeof(Ecs.Game.Components.Movement.MoveComponent),
		typeof(Ecs.Game.Components.PlayerComponent),
		typeof(Ecs.Game.Components.PositionComponent),
		typeof(Ecs.Game.Components.RotationComponent),
		typeof(Ecs.Game.Components.TransformComponent),
		typeof(GameDestroyedAddedListenerComponent),
		typeof(LinkRemovedListenerComponent),
		typeof(PositionAddedListenerComponent),
		typeof(RotationAddedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Ecs.Common.Components.DestroyedComponent), 0 },
		{ typeof(Ecs.Common.Components.LinkComponent), 1 },
		{ typeof(Ecs.Common.Components.UidComponent), 2 },
		{ typeof(Ecs.Game.Components.CameraComponent), 3 },
		{ typeof(Ecs.Game.Components.Movement.MoveComponent), 4 },
		{ typeof(Ecs.Game.Components.PlayerComponent), 5 },
		{ typeof(Ecs.Game.Components.PositionComponent), 6 },
		{ typeof(Ecs.Game.Components.RotationComponent), 7 },
		{ typeof(Ecs.Game.Components.TransformComponent), 8 },
		{ typeof(GameDestroyedAddedListenerComponent), 9 },
		{ typeof(LinkRemovedListenerComponent), 10 },
		{ typeof(PositionAddedListenerComponent), 11 },
		{ typeof(RotationAddedListenerComponent), 12 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
