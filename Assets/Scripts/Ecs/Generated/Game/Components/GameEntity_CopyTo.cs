//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using JCMG.EntitasRedux;

public partial class GameEntity
{
	/// <summary>
	/// Copies <paramref name="component"/> to this entity as a new component instance.
	/// </summary>
	public void CopyComponentTo(IComponent component)
	{
		#if !ENTITAS_REDUX_NO_IMPL
		if (component is Assets.Scripts.Ecs.Game.Components.DeadComponent Dead)
		{
			IsDead = true;
		}
		else if (component is Assets.Scripts.Ecs.Game.Components.Characteristics.HealthComponent Health)
		{
			CopyHealthTo(Health);
		}
		else if (component is Assets.Scripts.Ecs.Game.Components.Characteristics.ManaComponent Mana)
		{
			CopyManaTo(Mana);
		}
		else if (component is Assets.Scripts.Ecs.Game.Components.Characteristics.UltimateEnergyComponent UltimateEnergy)
		{
			CopyUltimateEnergyTo(UltimateEnergy);
		}
		else if (component is Ecs.Game.Components.RotationComponent Rotation)
		{
			CopyRotationTo(Rotation);
		}
		else if (component is Ecs.Game.Components.PositionComponent Position)
		{
			CopyPositionTo(Position);
		}
		else if (component is Ecs.Game.Components.TransformComponent Transform)
		{
			CopyTransformTo(Transform);
		}
		else if (component is Ecs.Game.Components.PlayerComponent Player)
		{
			IsPlayer = true;
		}
		else if (component is Ecs.Game.Components.CameraComponent Camera)
		{
			IsCamera = true;
		}
		else if (component is Ecs.Game.Components.Movement.MoveComponent Move)
		{
			IsMove = true;
		}
		else if (component is Ecs.Game.Components.Movement.MouseMoveComponent MouseMove)
		{
			IsMouseMove = true;
		}
		else if (component is Ecs.Game.Components.Movement.MoveInputComponent MoveInput)
		{
			CopyMoveInputTo(MoveInput);
		}
		else if (component is Ecs.Game.Components.Characteristics.ArmorComponent Armor)
		{
			CopyArmorTo(Armor);
		}
		else if (component is Ecs.Game.Components.Characteristics.WisdomComponent Wisdom)
		{
			CopyWisdomTo(Wisdom);
		}
		else if (component is Ecs.Game.Components.Characteristics.EnergyRecoveryComponent EnergyRecovery)
		{
			CopyEnergyRecoveryTo(EnergyRecovery);
		}
		else if (component is Ecs.Game.Components.Characteristics.CritRateComponent CritRate)
		{
			CopyCritRateTo(CritRate);
		}
		else if (component is Ecs.Game.Components.Characteristics.HealthRecoveryComponent HealthRecovery)
		{
			CopyHealthRecoveryTo(HealthRecovery);
		}
		else if (component is Ecs.Game.Components.Characteristics.DexterityComponent Dexterity)
		{
			CopyDexterityTo(Dexterity);
		}
		else if (component is Ecs.Game.Components.Characteristics.MoveSpeedComponent MoveSpeed)
		{
			CopyMoveSpeedTo(MoveSpeed);
		}
		else if (component is Ecs.Game.Components.Characteristics.PowerComponent Power)
		{
			CopyPowerTo(Power);
		}
		else if (component is Ecs.Common.Components.LinkComponent Link)
		{
			CopyLinkTo(Link);
		}
		else if (component is Ecs.Common.Components.UidComponent Uid)
		{
			CopyUidTo(Uid);
		}
		else if (component is Ecs.Common.Components.DestroyedComponent Destroyed)
		{
			IsDestroyed = true;
		}
		else if (component is HealthAddedListenerComponent HealthAddedListener)
		{
			CopyHealthAddedListenerTo(HealthAddedListener);
		}
		else if (component is ManaAddedListenerComponent ManaAddedListener)
		{
			CopyManaAddedListenerTo(ManaAddedListener);
		}
		else if (component is UltimateEnergyAddedListenerComponent UltimateEnergyAddedListener)
		{
			CopyUltimateEnergyAddedListenerTo(UltimateEnergyAddedListener);
		}
		else if (component is RotationAddedListenerComponent RotationAddedListener)
		{
			CopyRotationAddedListenerTo(RotationAddedListener);
		}
		else if (component is PositionAddedListenerComponent PositionAddedListener)
		{
			CopyPositionAddedListenerTo(PositionAddedListener);
		}
		else if (component is MoveInputAddedListenerComponent MoveInputAddedListener)
		{
			CopyMoveInputAddedListenerTo(MoveInputAddedListener);
		}
		else if (component is ArmorAddedListenerComponent ArmorAddedListener)
		{
			CopyArmorAddedListenerTo(ArmorAddedListener);
		}
		else if (component is WisdomAddedListenerComponent WisdomAddedListener)
		{
			CopyWisdomAddedListenerTo(WisdomAddedListener);
		}
		else if (component is EnergyRecoveryAddedListenerComponent EnergyRecoveryAddedListener)
		{
			CopyEnergyRecoveryAddedListenerTo(EnergyRecoveryAddedListener);
		}
		else if (component is CritRateAddedListenerComponent CritRateAddedListener)
		{
			CopyCritRateAddedListenerTo(CritRateAddedListener);
		}
		else if (component is HealthRecoveryAddedListenerComponent HealthRecoveryAddedListener)
		{
			CopyHealthRecoveryAddedListenerTo(HealthRecoveryAddedListener);
		}
		else if (component is DexterityAddedListenerComponent DexterityAddedListener)
		{
			CopyDexterityAddedListenerTo(DexterityAddedListener);
		}
		else if (component is MoveSpeedAddedListenerComponent MoveSpeedAddedListener)
		{
			CopyMoveSpeedAddedListenerTo(MoveSpeedAddedListener);
		}
		else if (component is PowerAddedListenerComponent PowerAddedListener)
		{
			CopyPowerAddedListenerTo(PowerAddedListener);
		}
		else if (component is LinkRemovedListenerComponent LinkRemovedListener)
		{
			CopyLinkRemovedListenerTo(LinkRemovedListener);
		}
		else if (component is GameDestroyedAddedListenerComponent GameDestroyedAddedListener)
		{
			CopyGameDestroyedAddedListenerTo(GameDestroyedAddedListener);
		}
		#endif
	}

	/// <summary>
	/// Copies all components on this entity to <paramref name="copyToEntity"/>.
	/// </summary>
	public void CopyTo(GameEntity copyToEntity)
	{
		for (var i = 0; i < GameComponentsLookup.TotalComponents; ++i)
		{
			if (HasComponent(i))
			{
				if (copyToEntity.HasComponent(i))
				{
					throw new EntityAlreadyHasComponentException(
						i,
						"Cannot copy component '" +
						GameComponentsLookup.ComponentNames[i] +
						"' to " +
						this +
						"!",
						"If replacement is intended, please call CopyTo() with `replaceExisting` set to true.");
				}

				var component = GetComponent(i);
				copyToEntity.CopyComponentTo(component);
			}
		}
	}

	/// <summary>
	/// Copies all components on this entity to <paramref name="copyToEntity"/>; if <paramref name="replaceExisting"/>
	/// is true any of the components that <paramref name="copyToEntity"/> has that this entity has will be replaced,
	/// otherwise they will be skipped.
	/// </summary>
	public void CopyTo(GameEntity copyToEntity, bool replaceExisting)
	{
		for (var i = 0; i < GameComponentsLookup.TotalComponents; ++i)
		{
			if (!HasComponent(i))
			{
				continue;
			}

			if (!copyToEntity.HasComponent(i) || replaceExisting)
			{
				var component = GetComponent(i);
				copyToEntity.CopyComponentTo(component);
			}
		}
	}

	/// <summary>
	/// Copies components on this entity at <paramref name="indices"/> in the <see cref="GameComponentsLookup"/> to
	/// <paramref name="copyToEntity"/>. If <paramref name="replaceExisting"/> is true any of the components that
	/// <paramref name="copyToEntity"/> has that this entity has will be replaced, otherwise they will be skipped.
	/// </summary>
	public void CopyTo(GameEntity copyToEntity, bool replaceExisting, params int[] indices)
	{
		for (var i = 0; i < indices.Length; ++i)
		{
			var index = indices[i];

			// Validate that the index is within range of the component lookup
			if (index < 0 && index >= GameComponentsLookup.TotalComponents)
			{
				const string OUT_OF_RANGE_WARNING =
					"Component Index [{0}] is out of range for [{1}].";

				const string HINT = "Please ensure any CopyTo indices are valid.";

				throw new IndexOutOfLookupRangeException(
					string.Format(OUT_OF_RANGE_WARNING, index, nameof(GameComponentsLookup)),
					HINT);
			}

			if (!HasComponent(index))
			{
				continue;
			}

			if (!copyToEntity.HasComponent(index) || replaceExisting)
			{
				var component = GetComponent(index);
				copyToEntity.CopyComponentTo(component);
			}
		}
	}
}
